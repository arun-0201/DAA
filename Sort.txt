/////////////// Input File ////////////

#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <time.h>
using namespace std;
void randomInput()
{
	ofstream fout("input.txt");
	srand ((long int)clock());
	for (int i=0; i<10010; i++)
	    fout << rand()%30000<<"\t";
	fout.close();	
}
void ascendingInput()
{
	ofstream fout("input-asc.txt");
	for (int i=0; i<10010; i++)
	    fout <<i<<"\t";
	fout.close();	
}
void descendingInput()
{
	ofstream fout("input-desc.txt");
	for (int i=10009; i>=0; i--)
	    fout <<i<<"\t";
	fout.close();	
}
void equalInput()
{
	ofstream fout("input-equal.txt");
	for (int i=0; i<=10010; i++)
	    fout <<1<<"\t";
	fout.close();	
}
int main(){
	randomInput();
	ascendingInput();
	descendingInput();
	equalInput();
	return 0;
}

////////////// Heap Sort //////////////////

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>

using namespace std;

long int arr[11000];
int n,count=0,heapsize;

void getInput() {
	int type;
	cout << "1.Random Input \n2.Ascending Input  \n3.Descending Input \n4.Equal Input";
	cout << "\nEnter input type : ";
	cin >> type;
	cout << "\nEnter the size of the array : ";
	cin >> n;
	char file[16];
	switch(type) {
		case 1:
			strcpy(file,"input.txt");
			break;
		case 2:
			strcpy(file,"input-asc.txt");
			break;
		case 3:
			strcpy(file,"input-desc.txt");
			break;
		case 4:
			strcpy(file,"input-equal.txt");
			break;
	}
	ifstream fin(file);
	for(int i=0; i<n; i++) {
		fin >> arr[i];
	}
	fin.close();
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i=0; i<n; i++) {
		fout << arr[i] << "\t";
	}
	fout.close();

	cout << "Count : " << count <<"\n\n\n"; 
}

void maxHeapify(int i) {	
	int l = 2*i + 1;
	int r = 2*i + 2;
	int largest;
	count++;
	if(l<=heapsize && arr[l]>arr[i])
	{
		largest = l;
	}
	else
	{
		largest = i;
	}
	if(r<=heapsize && arr[r]>arr[largest])
	{
		largest = r;
	}
	if(largest!=i)
	{
		int temp = arr[i];
		arr[i] = arr[largest];
		arr[largest] = temp;
		maxHeapify(largest);
	}
}

void buildMaxHeap() {
	for(int i=floor(n/2); i>=0; i--) {
		maxHeapify(i);
	}
}

void heapSort() {
	heapsize = n-1;
	buildMaxHeap();
	for(int i=n; i>=1; i--) {
		int temp = arr[0];
		arr[0] = arr[i];
		arr[i] = temp;
		heapsize--;
		maxHeapify(0);
	}
}
int main(){ 
	do {		
		getInput();
		heapSort();
		writeOutput();
		count=0;
	}while(true);
	return 0;	
}


///////////// Merge Sort /////////////////////////////

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>	//for floor function
#include <limits.h>	//for INT_MAX (infinity)
using namespace std;

long int arr[11000];
int n,count=0;

void getInput() {
	int type;
	cout << "1.Random Input \n2.Ascending Input  \n3.Descending Input \n4.Equal Input";
	cout << "\nEnter input type : ";
	cin >> type;
	cout << "\nEnter the size of the array : ";
	cin >> n;
	char file[16];
	switch(type) {
		case 1:
			strcpy(file,"input.txt");
			break;
		case 2:
			strcpy(file,"input-asc.txt");
			break;
		case 3:
			strcpy(file,"input-desc.txt");
			break;
		case 4:
			strcpy(file,"input-equal.txt");
			break;
	}
	ifstream fin(file);
	for(int i=0; i<n; i++) {
		fin >> arr[i];
	}
	fin.close();
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i=0; i<n; i++) {
		fout << arr[i] << "\t";
	}
	fout.close();

	cout << "Count : " << count <<"\n\n\n"; 
}

void merge(int p,int q,int r) {
	int i, j;
	int n1 = q - p + 1;
	int n2 = r - q;
	int L[n1+2], R[n2+2];
	for (int i=0; i<n1; i++)
	    L[i] = arr[p+i];
	L[n1] = INT_MAX;
	for (int j=0; j<n2; j++)
	    R[j] = arr[q+j+1];
	R[n2]=INT_MAX;
	i=0; j=0;
	for (int k=p; k<=r; k++){
		count++;
		if (L[i] <= R[j]){
			arr[k] = L[i];
			i++;
		}
		else{
			arr[k] = R[j];
			j++;
		}
	}
}

void mergeSort(int p,int r) {
	if(p<r) {
		int q = floor((p+r)/2);
		mergeSort(p,q);
		mergeSort(q+1,r);
		merge(p,q,r);
	}
}


int main(){ 
	do {		
		getInput();
		mergeSort(0,n-1);
		writeOutput();
		count=0;
	}while(true);
	return 0;	
}


//////////////////////////// Quick Sort//////////////////////////

#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

long int arr[11000];
int n,count=0;

void getInput() {
	int type;
	cout << "1.Random Input \n2.Ascending Input  \n3.Descending Input \n4.Equal Input";
	cout << "\nEnter input type : ";
	cin >> type;
	cout << "\nEnter the size of the array : ";
	cin >> n;
	char file[20];
	switch(type) {
		case 1:
			strcpy(file,"input.txt");
			break;
		case 2:
			strcpy(file,"input-asc.txt");
			break;
		case 3:
			strcpy(file,"input-desc.txt");
			break;
		case 4:
			strcpy(file,"input-equal.txt");
			break;
	}
	ifstream fin(file);
	for(int i=0; i<n; i++) {
		fin >> arr[i];
	}
	fin.close();
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i=0; i<n; i++) {
		fout << arr[i] << "\t";
	}
	fout.close();

	cout << "Count : " << count <<"\n\n\n"; 
}

int partition(int p,int r) {
	int x = arr[r];	
	int i = p-1;
	for(int j=p; j<=r-1 ; j++) {
		count++;
		if(arr[j] <= x) {	
			i++;
			int temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
	}
	int temp = arr[i+1];
	arr[i+1] = arr[r];
	arr[r] = temp;
	return i+1;
}

void quickSort(int p, int r) {
	if(p<r) {
		int q = partition(p,r);
		quickSort(p,q-1);
		quickSort(q+1,r);
	}
}

int main(){ 
	do {		
		getInput();
		quickSort(0,n-1);
		writeOutput();
		count=0;
	}while(true);
	return 0;	
}


//////////////////Randomized Quick Sort//////////////////

#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
using namespace std;

long int arr[11000];
int n,count=0;

void getInput() {
	int type;
	cout << "1.Random Input \n2.Ascending Input  \n3.Descending Input \n4.Equal Input";
	cout << "\nEnter input type : ";
	cin >> type;
	cout << "\nEnter the size of the array : ";
	cin >> n;
	char file[20];
	switch(type) {
		case 1:
			strcpy(file,"input.txt");
			break;
		case 2:
			strcpy(file,"input-asc.txt");
			break;
		case 3:
			strcpy(file,"input-desc.txt");
			break;
		case 4:
			strcpy(file,"input-equal.txt");
			break;
	}
	ifstream fin(file);
	for(int i=0; i<n; i++) {
		fin >> arr[i];
	}
	fin.close();
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i=0; i<n; i++) {
		fout << arr[i] << "\t";
	}
	fout.close();

	cout << "Count : " << count <<"\n\n\n"; 
}

int partition(int p,int r) {
	int x = arr[r];	
	int i = p-1;
	for(int j=p; j<=r-1 ; j++) {
		count++;
		if(arr[j] <= x) {	
			i++;
			int temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
	}
	int temp = arr[i+1];
	arr[i+1] = arr[r];
	arr[r] = temp;
	return i+1;
}

int randomizedPartition(int p, int r) {
	int i = rand() % (r-p+1);
	int temp = arr[r];
	arr[r] = arr[i];
	arr[i] = temp;
	return partition(p,r);
}
void randomizedQuickSort(int p, int r) {
	if(p<r) {
		int q = randomizedPartition(p,r);
		randomizedQuickSort(p,q-1);
		randomizedQuickSort(q+1,r);
	}
}

int main(){ 
	do {		
		getInput();
		randomizedQuickSort(0,n-1);
		writeOutput();
		count=0;
	}while(true);
	return 0;	
}


/////////////////////// Bucket Sort /////////////////

#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <time.h>
#include <cmath>
using namespace std;

struct node {
	float data;
	node* link;
};

struct bucket {
	node* head;
};	

float A[11000];
int n,count;
bucket* B[10];

node* createNode(float key) {
	node *temp = new node;
	temp -> data = key;
	temp -> link = NULL;
	return temp;
}

//--------------------------------------------------------------------------------------------------------------------------------

void insertByOrder(float key) {
	int index = floor(key*10);
	node *newNode = createNode(key);

	node* temp = B[index] -> head;
	if (temp == NULL || temp -> data >= key) {
        	newNode -> link = B[index] -> head;
        	B[index] -> head = newNode;
        	return;
    	}
	while(temp -> link != NULL && temp->link->data < key) {
		count++;
		temp = temp -> link;
		newNode -> link = temp->link;
    		temp->link = newNode;
		return;
	}
}

void concatenateOutput() {
	int index = 0;
	for(int i = 0; i < 9 ; i++) {
		node *temp = B[i] -> head;
		while(temp != NULL) {
			A[index++] = temp -> data;
			temp = temp -> link;
		}
	}
	count = count + index;
}

void bucketSort() {
	for(int i = 0 ; i < 10 ; i++) {
		B[i] = new bucket;
		B[i] -> head = 	NULL;
	}
	for(int i=0; i<n ; i++) {
		insertByOrder(A[i]);
		count++;
	}
	concatenateOutput();
}

//--------------------------------------------------------------------------------------------------------------------------------

void genInputFile() {
	ofstream fout("input_bsort.txt");
	srand((long int) clock());
	for(int i=0 ; i<10000 ; i++) 
		fout << (float)rand()/RAND_MAX << "\t";
	fout.close();
}

void getInput() {
	ifstream fin("input_bsort.txt");
	for(int i=0; i<n; i++) {
		fin >> A[i];
	}
	fin.close();
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i = 0; i < n ; i++) {
		fout << A[i] << "\t";
	}
	fout.close();	
	cout << "n = " << n << "\nCount = " << count << "\n\n";
}

//--------------------------------------------------------------------------------------------------------------------------------

int main() {
	genInputFile();
	do {
		cout << "Enter the no. of elements : " ;
		cin >> n;
		count=0;
		getInput();
		bucketSort();
		writeOutput();
	}while(true);
	return 0;
}


//////////////////////// Count Sort //////////////////////////////

#include <iostream>
#include <fstream>
#include <cstring>		//for concatenation of input file name
#include <stdlib.h>		//rand() function
using namespace std;

long int A[11000],B[11000];
int n,k,count=0;

void getInput(char fname[]) {
	ifstream fin(fname);
	for(int i=0; i<n; i++) {
		fin >> A[i];
	}
	fin.close();
}


void countSort() {
	int C[k];
	for(int i=0; i<k ; i++) {
		count = count+1;
		C[i] = 0;
	}
	for(int j=0; j<n ; j++) {
		count = count+1;
		C[A[j]] = C[A[j]]+1;
	}
	for(int i=1; i<k ; i++) {
		count = count+1;
		C[i] = C[i-1]+C[i];
	}
	for(int j=n-1; j>=0 ; j--) {
		count = count+1;
		B[C[A[j]]] = A[j];
		C[A[j]] = C[A[j]]-1;
	}
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i=0; i<n; i++) {
		fout << B[i] << "\t";
	}
	fout.close();

	cout << "n = " << n << "\nk = " << k << "\nCount = " << count << "\n\n";
}

void createInput() {
	int size[] = {10,50,100,500,1000,5000,10000};
	for(int i=0;i<7;i++) {
		char fname[25] = "input_csort_";
		char ext[2];
		ext[0] = '1' + i;
		ext[1] = '\0';
		n = size[i];
		k = n/2;
		strcat(fname,ext);
		strcat(fname,".txt");
		ofstream fout(fname);
		for(int j=0;j<n;j++)
		{
		fout<<rand()% (n/2) <<"\t";
		}
		fout.close();

		count=0;
		getInput(fname);
		countSort();
		writeOutput();	
	}
}

int main(){ 
	createInput();
	return 0;	
}

//////////////////////// Radix Sort ////////////////////////////////

#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <time.h>
#include <math.h>
using namespace std;

/*
	k - maximum value of count array
	d - digit counter
	n - no. of elements in A
	A - original array
	C - count array
	B - output array
*/

long int A[11000],B[11000];
int n,k=10,count;

void getInput() {
	ifstream fin("input_rsort.txt");
	for(int i=0; i<n; i++) {
		fin >> A[i];
	}
	fin.close();
}


void countSort(int d) {
    int C[k]
    int divisor = pow(10, d);

    for (int i = 0; i < k; i++) { 
        count = count + 1;
        C[i] = 0;
    }
    for (int j = 0; j < n; j++) { 
        count = count + 1;
        C[A[j] / divisor % 10] = C[A[j] / divisor % 10] + 1;
    }
    for (int i = 1; i < k; i++) { 
        count = count + 1;
        C[i] = C[i - 1] + C[i];
    }
    for (int j = n - 1; j >= 0; j--) { 
        count = count + 1;
        B[C[A[j] / divisor % 10] - 1] = A[j]; 
        C[A[j] / divisor % 10] = C[A[j] / divisor % 10] - 1;
    }
    for (int i = 0; i < n; i++) {
        A[i] = B[i];
    }
}

void writeOutput() {
	ofstream fout("output.txt");
	for(int i=0; i<n; i++) {
		fout << A[i] << "\t";
	}
	fout.close();
	cout << "n = " << n << "\nCount = " << count << "\n\n";
}

void createInput() {
	ofstream fout("input_rsort.txt");
	srand((long int)clock());
	for(int i=0; i<10000 ; i++)
		fout << 1000 + rand() % 9000 << "\t";
	fout.close();
}

int main(){ 
	createInput();
	do {
		cout << "Enter the no. of elements : " ;
		cin >> n;
		count=0;
		getInput();
		for(int d=0; d<=3; d++) 
			countSort(d);
		writeOutput();
	}while(true);
	return 0;	
}
